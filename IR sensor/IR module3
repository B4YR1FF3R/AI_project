// Motor control pins
const int motor1PWM = 5;  // PWM speed control for motor 1
const int motor1Dir = 4;  // Direction control for motor 1
const int motor2PWM = 6;  // PWM speed control for motor 2
const int motor2Dir = 7;  // Direction control for motor 2

// IR sensor pins
const int irSensor1 = 8;
const int irSensor2 = 9;

void setup() {
  Serial.begin(9600);

  pinMode(motor1PWM, OUTPUT);
  pinMode(motor1Dir, OUTPUT);
  pinMode(motor2PWM, OUTPUT);
  pinMode(motor2Dir, OUTPUT);

  pinMode(irSensor1, INPUT);
  pinMode(irSensor2, INPUT);
  pinMode(irSensor3, INPUT);
  pinMode(irSensor4, INPUT);
  pinMode(irSensor5, INPUT);
}

void loop() {
  int sensorValues[5];

  // Read sensor values
  sensorValues[0] = digitalRead(irSensor1);
  sensorValues[1] = digitalRead(irSensor2);
  sensorValues[2] = digitalRead(irSensor3);
  sensorValues[3] = digitalRead(irSensor4);
  sensorValues[4] = digitalRead(irSensor5);

  // Adjust motor speed based on sensor readings
  int error = calculateError(sensorValues);
  adjustMotors(error);

  // Add additional logic for other actions or behaviors as needed
}

int calculateError(int sensorValues[]) {
  // Adjust this function based on your specific sensor layout and line-following requirements
  int weightedSum = 0;
  int totalWeight = 0;

  for (int i = 0; i < 5; i++) {
    weightedSum += sensorValues[i] * (i - 2);  // Weighted sum based on sensor position
    totalWeight += sensorValues[i];
  }

  if (totalWeight == 0) {
    return 0;  // Avoid division by zero
  }

  int error = weightedSum / totalWeight;
  return error;
}

void adjustMotors(int error) {
  // Adjust this function based on your specific motor control and correction logic
  int motorSpeed = 100;  // Base motor speed

  int motorLeftSpeed = motorSpeed + error * 5;
  int motorRightSpeed = motorSpeed - error * 5;

  // Ensure motor speeds are within valid range (0-255)
  motorLeftSpeed = constrain(motorLeftSpeed, 0, 255);
  motorRightSpeed = constrain(motorRightSpeed, 0, 255);

  // Apply motor speeds
  analogWrite(motor1PWM, motorLeftSpeed);
  analogWrite(motor2PWM, motorRightSpeed);

  // Adjust motor directions based on your motor driver
  // (e.g., set HIGH/LOW to motorDir pins)
}